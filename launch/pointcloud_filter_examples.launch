<launch>
  <!--  Parameters-->
  <arg name="cloud_in" default="/pointcloud_in"/>
  <arg name="cloud_out" default="/pointcloud_out"/>
  <arg name="odom" default="/odometry"/>
  <arg name="fixed_frame" default="odom"/>
  <!--    -->

  <arg name="use_gdb" default="false"/>
  <arg name="launch_prefix" value="xterm -e gdb --args" if="$(arg use_gdb)"/>
  <arg name="launch_prefix" value="" unless="$(arg use_gdb)"/>

  <arg name="nodelet_manager" default="nodelet_manager"/>
  <arg name="nodelet_args" default="--no-bond"/>
  <arg name="respawn" default="false"/>
  <arg name="simulation" default="false"/>

<!-- Starting the filter chain -->
  <node pkg="nodelet"
          type="nodelet"
          name="$(arg nodelet_manager)"
          launch-prefix="$(arg launch_prefix)"
          args="manager"
          output="screen"
          respawn="$(arg respawn)"/>

<!-- Merger filter -->
      <node pkg="nodelet"
            type="nodelet"
            name="merger_filter"
            args="load pointcloud_merger/PointCloudMerger $(arg nodelet_manager) $(arg nodelet_args)"
            launch-prefix="$(arg launch_prefix)"
            output="screen">
        <remap from="~input" to="$(arg cloud_in)"/>
        <rosparam subst_value="true">
          # Number of point clouds to keep in queue
          output_queue_size: 10

          # Mandatory frame_id where merge happens. Has to be different from data frame_id
          merge_frame: $(arg fixed_frame)

          # Minimum time before new measurement is added [s]
          min_time_between_input: 0.5

          # Minimum translation before new measurement is added [m]
          min_translation_between_input: 0.5

          # Minimum rotation before new measurement is added [rad]
          min_rotation_between_input: 0.2

          # Allowable delay in TF data[s]
          transform_tolerance: 10.0
        </rosparam>
      </node>

<!--  Crop filter along y axis -->
      <node pkg="nodelet"
              type="nodelet"
              name="crop_x_filter"
              args="load pointcloud_merger/PassThroughFilter $(arg nodelet_manager) $(arg nodelet_args)"
              respawn="$(arg respawn)">
        <remap from="~input" to="merger_filter/output"/>
        <rosparam>
          reference_frame: base
          filter_field_name: x
          filter_limit_min: -4.0
          filter_limit_max: 4.0
        </rosparam>
      </node>

<!-- Voxelize filter -->
      <node pkg="nodelet"
              type="nodelet"
              name="voxel_filter_$(arg instance)"
              args="load pointcloud_merger/VoxelFilter $(arg nodelet_manager) $(arg nodelet_args)"
              respawn="$(arg respawn)">
        <remap from="~input" to="crop_x_filter/output"/>
        <remap from="~output" to="$(arg cloud_out)"/>

        <rosparam>
          voxel_size: 0.1
        </rosparam>
      </node>

  <node pkg="rostopic"
        type="rostopic"
        name="subscriber"
        args="hz $(arg cloud_out)"
        output="screen"/>
</launch>